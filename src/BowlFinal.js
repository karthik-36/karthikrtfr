/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef , useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/bowlFinal.glb')
  const { actions } = useAnimations(animations, group)

  // animations.forEach((animation) => {
  //   const action = animation.clipAction(animation);
  //   action.reset();
  //   action.clampWhenFinished = true;
  //   action.timeScale = 1;
  //   action.setLoop(THREE.LoopOnce, 1);

  // });


  // actions.forEach((action) => {
  //   //const action = animation.clipAction(animation);
  //   action.reset();
  //   action.clampWhenFinished = true;
  //   action.timeScale = 1;
  //   action.setLoop(THREE.LoopOnce, 1);

  // });

  animations.forEach((animation) => {
    animation.duration = 2.6;
  });

    
  useEffect(() => {
    actions['Armature|mixamo.com|Layer0'].play();
    actions['SphereAction'].play();
    actions['CylinderAction.001'].play();
    actions['Cylinder.001Action.001'].play();
 });

  return (
    <group scale = {[1.7,1.7,1.7]} rotation = {[0,3.4,0]} position = {[0.5,0,5]}  ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
          <mesh name="Sphere" geometry={nodes.Sphere.geometry} material={materials.orange} position={[-0.01, 0.98, 0.75]} scale={-0.13} />
          <mesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} position={[-0.42, 0.18, 10.16]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-0.04, -0.19, -0.04]} />
          <mesh name="Cylinder001" geometry={nodes.Cylinder001.geometry} material={nodes.Cylinder001.material} position={[-0.26, 0.19, 10.16]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-0.04, -0.19, -0.04]} />
          <mesh name="Plane" geometry={nodes.Plane.geometry} material={materials['Material.001']} position={[0.07, -0.01, 6.21]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-0.89, -2.13, -4.24]} />
          <skinnedMesh name="Wolf3D_Body" geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
          <skinnedMesh name="Wolf3D_Hair" geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Bottom" geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Footwear" geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Top" geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
          <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
          <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
          <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
          <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/bowlFinal.glb')
